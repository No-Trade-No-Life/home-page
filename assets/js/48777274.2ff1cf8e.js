"use strict";(self.webpackChunk_yuants_docs=self.webpackChunk_yuants_docs||[]).push([[153],{158:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>g});var n=o(6393);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(o),d=r,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return o?n.createElement(g,a(a({ref:t},c),{},{components:o})):n.createElement(g,a({ref:t},c))}));function g(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=o[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},59:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=o(5296),r=(o(6393),o(158));const i={sidebar_position:3},a="Using Position Manager",l={unversionedId:"agent-guide/using-position-manager",id:"agent-guide/using-position-manager",title:"Using Position Manager",description:"Position Manager helps managing positions by order operations, which is one of advanced forms of hook.",source:"@site/docs/agent-guide/using-position-manager.md",sourceDirName:"agent-guide",slug:"/agent-guide/using-position-manager",permalink:"/docs/agent-guide/using-position-manager",draft:!1,editUrl:"https://github.com/No-Trade-No-Life/Yuan/tree/main/ui/docs/docs/agent-guide/using-position-manager.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Using Hooks",permalink:"/docs/agent-guide/using-hooks"},next:{title:"Using Technical Indicators",permalink:"/docs/agent-guide/using-technical-indicators"}},s={},u=[{value:"The Skeleton",id:"the-skeleton",level:2},{value:"Calculate Order Volume",id:"calculate-order-volume",level:2},{value:"Make Orders",id:"make-orders",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Further Reading",id:"further-reading",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-position-manager"},"Using Position Manager"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Position Manager")," helps managing positions by order operations, which is one of advanced forms of hook."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Prerequisite Reading:"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./using-hooks"},"Using Hooks")))),(0,r.kt)("p",null,"You can compose your own position manager by using the basic hooks."),(0,r.kt)("p",null,"For example, you want to use a simple number to manage the target position volume."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Positive for long and negative for short."),(0,r.kt)("li",{parentName:"ul"},"Zero for close all the volume."),(0,r.kt)("li",{parentName:"ul"},"Submit MARKET-price orders.")),(0,r.kt)("p",null,"Let's see how to implement it."),(0,r.kt)("h2",{id:"the-skeleton"},"The Skeleton"),(0,r.kt)("p",null,"Firstly, you need to define the type of the position manager. And prepare some required hooks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const useSimplePositionManager = (\n  account_id: string,\n  product_id: string,\n): [number, (v: number) => void] => {\n  // useState: when setTargetVolume, re-execute the agent code.\n  const [targetVolume, setTargetVolume] = useState(0);\n  // Get reference to the account info.\n  const accountInfo = useAccountInfo({ account_id });\n  // Use the exchange to submit & cancel orders.\n  const exchange = useExchange();\n\n  // returns the target volume and the setter.\n  return [targetVolume, setTargetVolume];\n};\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useState")," is used to store the target volume. When the target volume changes, the agent code will be re-executed. Then we can calculate the volume to order reactively."),(0,r.kt)("li",{parentName:"ul"},"We can simply return the target volume and the setter, just as ",(0,r.kt)("inlineCode",{parentName:"li"},"useState")," does. It's a good practice to keep the interface consistent."),(0,r.kt)("li",{parentName:"ul"},"We need ",(0,r.kt)("inlineCode",{parentName:"li"},"useExchange")," to get the methods to submit & cancel orders."),(0,r.kt)("li",{parentName:"ul"},"We need ",(0,r.kt)("inlineCode",{parentName:"li"},"useAccountInfo")," to get the actual volume of the positions.")),(0,r.kt)("h2",{id:"calculate-order-volume"},"Calculate Order Volume"),(0,r.kt)("p",null,"Then, you need to calculate the volume to order for LONG / SHORT positions correspond."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Generate a random UUID for each position.\nconst longPositionId = useMemo(() => UUID(), []);\nconst shortPositionId = useMemo(() => UUID(), []);\n\n// Get actual volume of the positions.\nconst longPositionVolume =\n  accountInfo.positions.find((position) => position.position_id === longPositionId)?.volume ?? 0;\nconst shortPositionVolume =\n  accountInfo.positions.find((position) => position.position_id === shortPositionId)?.volume ?? 0;\n\n// Calc the volume to open/close.\nconst openLongVolume = Math.max(targetVolume - longPositionVolume, 0);\nconst openShortVolume = Math.max(-targetVolume - shortPositionVolume, 0);\nconst closeLongVolume = Math.min(longPositionVolume - targetVolume, longPositionVolume);\nconst closeShortVolume = Math.min(shortPositionVolume - -targetVolume, shortPositionVolume);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"useMemo")," to generate a random UUID for each position and memoize it. It's a good practice to keep the position ID unique."),(0,r.kt)("li",{parentName:"ul"},"Be careful that the position may not exist before position opened. So we need to check it before using it. In case of ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),", we use ",(0,r.kt)("inlineCode",{parentName:"li"},"??")," to return ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},"Volume of position is always non-negative. Look carefully at the calculation of the volume to open/close. Make sure you have understood it.")),(0,r.kt)("h2",{id:"make-orders"},"Make Orders"),(0,r.kt)("p",null,"Finally, use an Effect to handle orders."),(0,r.kt)("p",null,"The following code is an example of opening a long position. So does close the LONG position or open / close the SHORT position."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ...\n// OPEN LONG: submit & cancel order.\nuseEffect(() => {\n  if (openLongVolume <= 0) return;\n  const order = {\n    client_order_id: UUID(),\n    account_id,\n    product_id,\n    position_id: longPositionId,\n    type: OrderType.MARKET,\n    direction: OrderDirection.OPEN_LONG,\n    volume: openLongVolume,\n  };\n  exchange.submitOrder(order);\n  return () => {\n    exchange.cancelOrder(order.client_order_id);\n  };\n}, [openLongVolume]);\n// ...\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"useEffect")," to submit & cancel orders. When the volume to open changes, the effect will be re-executed."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"UUID")," to generate a random UUID for each order. It's a good practice to keep the order ID unique."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"OrderType.MARKET")," to submit a MARKET-price order."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"OrderDirection.OPEN_LONG")," to open a LONG position. So does ",(0,r.kt)("inlineCode",{parentName:"li"},"OrderDirection.OPEN_SHORT")," to open a SHORT position."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"OrderDirection.CLOSE_LONG")," to close a LONG position. So does ",(0,r.kt)("inlineCode",{parentName:"li"},"OrderDirection.CLOSE_SHORT")," to close a SHORT position."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"exchange.cancelOrder")," to cancel the order when the volume to open changes and then submit a new one. (useEffect cleanup function)")),(0,r.kt)("p",null,"View the complete source code from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/No-Trade-No-Life/Yuan-Public-Workspace/blob/main/%40libs/utils/useSimplePositionManager.ts"},"GitHub"),":"),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("p",null,"You can import the example workspace and import it from ",(0,r.kt)("inlineCode",{parentName:"p"},"@libs"),"."),(0,r.kt)("p",null,"Just like this, you can set the target position volume in an effect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { useSimplePositionManager } from '@libs';\n\nexport default () => {\n  const [targetVolume, setTargetVolume] = useSimplePositionManager('your-account-id', 'XAUUSD');\n\n  useEffect(() => {\n    // Set target volume to 10.\n    setTargetVolume(10);\n  }, []);\n};\n")),(0,r.kt)("p",null,"You can also checkout the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/No-Trade-No-Life/Yuan-Public-Workspace/blob/main/%40models/double-ma.ts"},"double moving average strategy")," to learn how to use it."),(0,r.kt)("h2",{id:"further-reading"},"Further Reading"),(0,r.kt)("p",null,"You can compose another position manager as you need. For example, use LIMIT-price order or use a complex order submitting strategy."),(0,r.kt)("p",null,"You can find out more custom hooks resource in the repo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/No-Trade-No-Life/Yuan-Public-Workspace"},"Yuan Public Workspace"))))}m.isMDXComponent=!0}}]);