"use strict";(self.webpackChunk_yuants_docs=self.webpackChunk_yuants_docs||[]).push([[2153],{5842:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=n(9541),s=n(4317);const i={sidebar_position:3},r="Using Position Manager",c={id:"agent-guide/using-position-manager",title:"Using Position Manager",description:"Position Manager helps managing positions by order operations, which is one of advanced forms of hook.",source:"@site/docs/agent-guide/using-position-manager.md",sourceDirName:"agent-guide",slug:"/agent-guide/using-position-manager",permalink:"/zh-Hans/docs/agent-guide/using-position-manager",draft:!1,unlisted:!1,editUrl:"https://github.com/No-Trade-No-Life/Yuan/tree/main/ui/docs/docs/agent-guide/using-position-manager.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Using Hooks",permalink:"/zh-Hans/docs/agent-guide/using-hooks"},next:{title:"Using Time Series",permalink:"/zh-Hans/docs/agent-guide/using-time-series"}},a={},l=[{value:"The Skeleton",id:"the-skeleton",level:2},{value:"Calculate Order Volume",id:"calculate-order-volume",level:2},{value:"Make Orders",id:"make-orders",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const o={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"using-position-manager",children:"Using Position Manager"}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.strong,{children:"Position Manager"})," helps managing positions by order operations, which is one of advanced forms of hook."]}),"\n",(0,t.jsxs)(o.blockquote,{children:["\n",(0,t.jsx)(o.p,{children:"Prerequisite Reading:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:(0,t.jsx)(o.a,{href:"./using-hooks",children:"Using Hooks"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"You can compose your own position manager by using the basic hooks."}),"\n",(0,t.jsx)(o.p,{children:"For example, you want to use a simple number to manage the target position volume."}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:"Positive for long and negative for short."}),"\n",(0,t.jsx)(o.li,{children:"Zero for close all the volume."}),"\n",(0,t.jsx)(o.li,{children:"Submit MARKET-price orders."}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"Let's see how to implement it."}),"\n",(0,t.jsx)(o.h2,{id:"the-skeleton",children:"The Skeleton"}),"\n",(0,t.jsx)(o.p,{children:"Firstly, you need to define the type of the position manager. And prepare some required hooks."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",children:"export const useSimplePositionManager = (\n  account_id: string,\n  product_id: string,\n): [number, (v: number) => void] => {\n  // useState: when setTargetVolume, re-execute the agent code.\n  const [targetVolume, setTargetVolume] = useState(0);\n  // Get reference to the account info.\n  const accountInfo = useAccountInfo({ account_id });\n  // Use the exchange to submit & cancel orders.\n  const exchange = useExchange();\n\n  // returns the target volume and the setter.\n  return [targetVolume, setTargetVolume];\n};\n"})}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"useState"})," is used to store the target volume. When the target volume changes, the agent code will be re-executed. Then we can calculate the volume to order reactively."]}),"\n",(0,t.jsxs)(o.li,{children:["We can simply return the target volume and the setter, just as ",(0,t.jsx)(o.code,{children:"useState"})," does. It's a good practice to keep the interface consistent."]}),"\n",(0,t.jsxs)(o.li,{children:["We need ",(0,t.jsx)(o.code,{children:"useExchange"})," to get the methods to submit & cancel orders."]}),"\n",(0,t.jsxs)(o.li,{children:["We need ",(0,t.jsx)(o.code,{children:"useAccountInfo"})," to get the actual volume of the positions."]}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"calculate-order-volume",children:"Calculate Order Volume"}),"\n",(0,t.jsx)(o.p,{children:"Then, you need to calculate the volume to order for LONG / SHORT positions correspond."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",children:"// Generate a random UUID for each position.\nconst longPositionId = useMemo(() => UUID(), []);\nconst shortPositionId = useMemo(() => UUID(), []);\n\n// Get actual volume of the positions.\nconst longPositionVolume =\n  accountInfo.positions.find((position) => position.position_id === longPositionId)?.volume ?? 0;\nconst shortPositionVolume =\n  accountInfo.positions.find((position) => position.position_id === shortPositionId)?.volume ?? 0;\n\n// Calc the volume to open/close.\nconst openLongVolume = Math.max(targetVolume - longPositionVolume, 0);\nconst openShortVolume = Math.max(-targetVolume - shortPositionVolume, 0);\nconst closeLongVolume = Math.min(longPositionVolume - targetVolume, longPositionVolume);\nconst closeShortVolume = Math.min(shortPositionVolume - -targetVolume, shortPositionVolume);\n"})}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["We use ",(0,t.jsx)(o.code,{children:"useMemo"})," to generate a random UUID for each position and memoize it. It's a good practice to keep the position ID unique."]}),"\n",(0,t.jsxs)(o.li,{children:["Be careful that the position may not exist before position opened. So we need to check it before using it. In case of ",(0,t.jsx)(o.code,{children:"undefined"}),", we use ",(0,t.jsx)(o.code,{children:"??"})," to return ",(0,t.jsx)(o.code,{children:"0"}),"."]}),"\n",(0,t.jsx)(o.li,{children:"Volume of position is always non-negative. Look carefully at the calculation of the volume to open/close. Make sure you have understood it."}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"make-orders",children:"Make Orders"}),"\n",(0,t.jsx)(o.p,{children:"Finally, use an Effect to handle orders."}),"\n",(0,t.jsx)(o.p,{children:"The following code is an example of opening a long position. So does close the LONG position or open / close the SHORT position."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",children:"// ...\n// OPEN LONG: submit & cancel order.\nuseEffect(() => {\n  if (openLongVolume <= 0) return;\n  const order = {\n    order_id: UUID(),\n    account_id,\n    product_id,\n    position_id: longPositionId,\n    type: OrderType.MARKET,\n    direction: OrderDirection.OPEN_LONG,\n    volume: openLongVolume,\n  };\n  exchange.submitOrder(order);\n  return () => {\n    exchange.cancelOrder(order.order_id);\n  };\n}, [openLongVolume]);\n// ...\n"})}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["We use ",(0,t.jsx)(o.code,{children:"useEffect"})," to submit & cancel orders. When the volume to open changes, the effect will be re-executed."]}),"\n",(0,t.jsxs)(o.li,{children:["We use ",(0,t.jsx)(o.code,{children:"UUID"})," to generate a random UUID for each order. It's a good practice to keep the order ID unique."]}),"\n",(0,t.jsxs)(o.li,{children:["We use ",(0,t.jsx)(o.code,{children:"OrderType.MARKET"})," to submit a MARKET-price order."]}),"\n",(0,t.jsxs)(o.li,{children:["We use ",(0,t.jsx)(o.code,{children:"OrderDirection.OPEN_LONG"})," to open a LONG position. So does ",(0,t.jsx)(o.code,{children:"OrderDirection.OPEN_SHORT"})," to open a SHORT position."]}),"\n",(0,t.jsxs)(o.li,{children:["We use ",(0,t.jsx)(o.code,{children:"OrderDirection.CLOSE_LONG"})," to close a LONG position. So does ",(0,t.jsx)(o.code,{children:"OrderDirection.CLOSE_SHORT"})," to close a SHORT position."]}),"\n",(0,t.jsxs)(o.li,{children:["We use ",(0,t.jsx)(o.code,{children:"exchange.cancelOrder"})," to cancel the order when the volume to open changes and then submit a new one. (useEffect cleanup function)"]}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["View the complete source code from ",(0,t.jsx)(o.a,{href:"https://github.com/No-Trade-No-Life/Yuan-Public-Workspace/blob/main/%40libs/utils/useSimplePositionManager.ts",children:"GitHub"}),":"]}),"\n",(0,t.jsx)(o.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,t.jsxs)(o.p,{children:["You can import the example workspace and import it from ",(0,t.jsx)(o.code,{children:"@libs"}),"."]}),"\n",(0,t.jsx)(o.p,{children:"Just like this, you can set the target position volume in an effect."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",children:"import { useSimplePositionManager } from '@libs';\n\nexport default () => {\n  const [targetVolume, setTargetVolume] = useSimplePositionManager('your-account-id', 'XAUUSD');\n\n  useEffect(() => {\n    // Set target volume to 10.\n    setTargetVolume(10);\n  }, []);\n};\n"})}),"\n",(0,t.jsxs)(o.p,{children:["You can also checkout the ",(0,t.jsx)(o.a,{href:"https://github.com/No-Trade-No-Life/Yuan-Public-Workspace/blob/main/%40models/double-ma.ts",children:"double moving average strategy"})," to learn how to use it."]}),"\n",(0,t.jsx)(o.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,t.jsx)(o.p,{children:"You can compose another position manager as you need. For example, use LIMIT-price order or use a complex order submitting strategy."}),"\n",(0,t.jsx)(o.p,{children:"You can find out more custom hooks resource in the repo:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:(0,t.jsx)(o.a,{href:"https://github.com/No-Trade-No-Life/Yuan-Public-Workspace",children:"Yuan Public Workspace"})}),"\n"]})]})}function u(e={}){const{wrapper:o}={...(0,s.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},4317:(e,o,n)=>{n.d(o,{Z:()=>c,a:()=>r});var t=n(3981);const s={},i=t.createContext(s);function r(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);